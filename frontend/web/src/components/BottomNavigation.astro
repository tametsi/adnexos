---
import { scale } from '@/lib/transitions';
import type { AstroInstance } from 'astro';

interface Props {
	activeUrl: string;
}
const { activeUrl } = Astro.props;

// fetch page components
const components: (AstroInstance & { title?: string; navIndex?: number; icon?: any })[] =
	Object.values(import.meta.glob('../pages/*.astro', { eager: true }));
// filter and sort components to show them in btm-nav
const pages = components
	.filter(x => x.navIndex && x.icon)
	.toSorted((a, b) => (a.navIndex ?? 0) - (b.navIndex ?? 0))
	.map(x => ({
		url: x.url || '/',
		icon: x.icon,
		title: x.title,
	}));
---

<div class="btm-nav bg-base-200">
	{
		pages.map(x => {
			const active = activeUrl === x.url;
			return (
				<a
					href={x.url}
					aria-label={x.title}
					class:list={[{ 'opacity-70': !active, 'scale-125': active }]}
					transition:animate={scale}
				>
					<x.icon />
				</a>
			);
		})
	}
</div>

<style>
	@keyframes scaleIn {
		from {
			transform: translate(var(--tw-translate-x), var(--tw-translate-y))
				rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(1)
				scaleY(1);
		}
	}
	@keyframes scaleOut {
		to {
			transform: translate(var(--tw-translate-x), var(--tw-translate-y))
				rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(1)
				scaleY(1);
		}
	}
</style>
